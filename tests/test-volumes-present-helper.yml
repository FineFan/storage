---
- set_fact:
    _storage_mount_entries: []

- name: gather mounts related to each volume in the pool
  set_fact:
    _storage_mount_entries: "{{ _storage_mount_entries }} + [ {{ ansible_mounts|selectattr('device', 'equalto', current_volume['_device'])|list }} ]"
  loop: "{{ current_pool.volumes }}"
  loop_control:
    loop_var: current_volume

- name: Ensure all volumes were correctly managed in /etc/fstab and ansible_mounts.
  assert:
    that:
      - "{{ _storage_mount_entries[idx]|length==1
            if current_volume.state is defined and current_volume.state == 'present' and current_volume.mount_point and current_volume.mount_point.startswith('/') else
            _storage_mount_entries[idx]|list|length==0
         }}"
    msg: "The volume {{ current_volume.name }} is not mounted according to the requested state: {{ current_volume.state }} / {{ _storage_mount_entries[idx]|list }}"
  loop: "{{ current_pool.volumes }}"
  loop_control:
    loop_var: current_volume
    index_var: idx

- name: Ensure all volumes were correctly managed in /etc/fstab and ansible_mounts.
  assert:
    that:
      - "{{ (_storage_mount_entries[idx]|length==1 and _storage_mount_entries[idx]|map(attribute='mount')|first) == current_volume.mount_point
            if current_volume.state is defined and current_volume.state == 'present' and
               current_volume.mount_point and current_volume.mount_point.startswith('/')
            else true
        }}"
    msg: "The volume {{ current_volume.name }} is mounted at the wrong mount point."
  loop: "{{ current_pool.volumes }}"
  loop_control:
    loop_var: current_volume
    index_var: idx

- name: Ensure all volumes were correctly managed in /etc/fstab.
  assert:
    that:
      - "{{ current_volume.mount_point not in fstab_buffer.stdout if
            (current_volume.state is defined and current_volume.state == 'absent')
            else current_volume.mount_point in fstab_buffer.stdout }}"
    msg: "The volume {{ current_volume.name }} has incorrect mount point in /etc/fstab."
  loop: "{{ current_pool.volumes }}"
  loop_control:
    loop_var: current_volume

- name: Ensure partitions were used for volumes if specified.
  assert:
    that:
      - "{{ current_volume._device[-1].isdigit() if current_volume.type == 'partition' and current_volume.state == 'present' else True }}"
    msg: "Volume is not a partition as specified."
  loop: "{{ current_pool.volumes }}"
  loop_control:
    loop_var: current_volume
  when: current_pool.state == "present"

- name: Get a list of the current LVM pool's PVs
  command: "pvs -o pv_name -S vg_name={{ current_pool.name }} --noheadings"
  register: pool_pvs_output
  when: current_pool.type == 'lvm' and false

- name: Ensure partitions were used for pool backing devices if specified.
  assert:
    that:
      - "{{ pv[-1].isdigit() }}"
    msg: "PVs are not partitions as specified."
  loop: "{{ pool_pvs_output.stdout_lines|map('trim')|list }}"
  loop_control:
    loop_var: pv
  when: current_pool.type == 'lvm' and false
