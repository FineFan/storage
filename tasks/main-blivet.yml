---
- name: get a list of rpm packages installed on host machine
  package_facts:
    manager: "auto"
  when: false

- name: make sure blivet is available
  package:
    name: "{{ blivet_package }}"
    state: present

##
## This is all to fill in missing defaults in the list of pools (and their volumes).
##
- name: initialize internal facts
  set_fact:
    pools: []
    volumes: []
    all_vols: []
    vols: []
    vols_by_pool: []
    vol_pools: []

- name: Apply defaults to pools and volumes [1/6]
  set_fact:
    pools: "{{ pools|default([]) }} + [ {{ pool_defaults|combine(pool) }} ]"
  loop: "{{ storage_pools|default([]) }}"
  loop_control:
      loop_var: pool
  when: storage_pools is defined

- name: Apply defaults to pools and volumes [2/6]
  set_fact:
    vols: "{{ vols|default([]) }} + [{{item.1}}]"
    vol_defaults: "{{ vol_defaults|default([]) }} + [{{ volume_defaults }}]"
    vol_pools: "{{ vol_pools|default([]) }} + ['{{ item.0.name }}']"
  loop: "{{ pools|subelements('volumes') }}"
  when: storage_pools is defined

- name: Apply defaults to pools and volumes [3/6]
  set_fact:
    all_vols: "{{ all_vols|default([]) }} + [ {{ item.1|combine(item.0, {'pool': vol_pools[idx]}) }} ]"
  loop: "{{ vols|zip(vol_defaults)|list }}"
  loop_control:
    index_var: idx
  when: storage_pools is defined

- name: Apply defaults to pools and volumes [4/6]
  set_fact:
    vols_by_pool: "{{ vols_by_pool|default({})|combine({item.name: all_vols|selectattr('pool', 'equalto', item.name)|list}) }}"
  loop: "{{ pools }}"
  when: storage_pools is defined

- name: Apply defaults to pools and volumes [5/6]
  set_fact:
    pools: "{{ pools[:idx] }} + [ {{ pool|combine({'volumes': vols_by_pool[pool.name]}) }} ]  +  {{ pools[idx+1:] }}"
  loop: "{{ pools }}"
  loop_control:
    loop_var: pool
    index_var: idx
  when: storage_pools is defined

- name: Apply defaults to pools and volumes [6/6]
  set_fact:
    volumes: "{{ volumes|default([]) }} + [ {{ volume_defaults|combine(volume) }} ]"
  loop: "{{ storage_volumes|default([]) }}"
  loop_control:
      loop_var: volume
  when: storage_volumes is defined

##
## End of absurdly long process to inject defaults into user-specified pools and volumes lists.
##

- debug:
    var: pools

- debug:
    var: volumes

- name: manage the pools and volumes to match the specified state
  blivet:
    pools: "{{ pools }}"
    volumes: "{{ volumes }}"
    use_partitions: "{{ use_partitions }}"
    disklabel_type: "{{ disklabel_type }}"
  register: blivet_output

- debug:
    var: blivet_output

- name: set the list of pools for test verification
  set_fact:
    _storage_pools_list: "{{ blivet_output.pools }}"

- name: set the list of volumes for test verification
  set_fact:
    _storage_volumes_list: "{{ blivet_output.volumes }}"

# Mount Management
#
# remove obsolete mounts
#  removed
#  reformatted (just add w/ new settings?)
#  changed options? (just add w/ new settings?)
# add new mounts
#
- name: manage mounts to match the specified state
  mount:
    src: "{{ mount_info['src'] if mount_info['state'] == 'mounted' else omit }}"
    path: "{{ mount_info['path'] }}"
    fstype: "{{ mount_info['fstype'] if mount_info['state'] == 'mounted' else omit }}"
    opts: "{{ mount_info['opts'] if mount_info['state'] == 'mounted' else omit }}"
    state: "{{ mount_info['state'] }}"
  loop: "{{ blivet_output.mounts }}"
  loop_control:
    loop_var: mount_info

- name: tell systemd to refresh its view of /etc/fstab
  command: systemctl daemon-reload
  when: blivet_output['mounts']

#
# Update facts since we may have changed system state.
#
# Should this be in a handler instead?
#
- name: Update facts
  setup:
  when: not ansible_check_mode
